name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # AnÃ¡lisis de cÃ³digo y calidad
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint backend
        run: pnpm --filter backend lint

      - name: Lint frontend
        run: pnpm --filter frontend lint

      - name: Type check backend
        run: pnpm --filter backend type-check

      - name: Type check frontend
        run: pnpm --filter frontend type-check

  # Tests del backend
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Prisma migrations
        run: pnpm --filter backend prisma:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db

      - name: Run backend tests
        run: pnpm --filter backend test:coverage
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  # Tests del frontend
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        run: pnpm --filter frontend test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # Tests de ML Services
  ml-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install ML dependencies
        run: |
          cd ml-services
          pip install -r requirements.txt

      - name: Run ML tests
        run: |
          cd ml-services
          pytest --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./ml-services/coverage.xml
          flags: ml-services

  # Build y validaciÃ³n
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, ml-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend
        run: pnpm --filter backend build

      - name: Build frontend
        run: pnpm --filter frontend build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker images
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          tags: backend:latest
          load: true # Load image into the runner
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and cache frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          tags: frontend:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and cache ml-services image
        uses: docker/build-push-action@v5
        with:
          context: ./ml-services
          tags: ml-services:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create issue on build failure
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: 'URGENT: CI Build Failed on main branch ðŸš¨'
          body: |
            The CI build for the `main` branch has failed.

            - **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Commit:** ${{ github.sha }}

            Please investigate and fix the issue immediately to unblock the pipeline.
          labels: |
            bug
            critical
            automated
